{"version":3,"sources":["components/index.js","App.jsx","serviceWorker.js","index.js"],"names":["railOuterStyle","position","width","height","transform","cursor","railInnerStyle","pointerEvents","backgroundColor","SliderRail","getRailProps","style","Handle","domain","min","max","handle","id","value","percent","getHandleProps","disabled","left","WebkitTapHighlightColor","zIndex","role","aria-valuemin","aria-valuemax","aria-valuenow","borderRadius","background","Track","source","target","getTrackProps","defaultProps","sliderStyle","touchAction","color","domain2","defaultValues","App","props","handleChangeSumm","summValue","setState","handleChangeMonth","monthValue","getExchangeRates","a","async","fetch","response","json","data","state","exchangeRate","Cur_OfficialRate","loanRate","paymentUSD","paymentBLR","values","slice","update","bind","Math","pow","this","toFixed","payment","className","mode","step","rootStyle","onUpdate","onChange","handles","map","key","right","tracks","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAMMA,EAAiB,CACrBC,SAAU,WACVC,MAAO,OACPC,OAAQ,GACRC,UAAW,sBAEXC,OAAQ,WAIJC,EAAiB,CACrBL,SAAU,WACVC,MAAO,OACPC,OAAQ,GACRC,UAAW,sBACXG,cAAe,OACfC,gBAAiB,WAGZ,SAASC,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,aAC3B,OACE,kBAAC,WAAD,KACE,uCAAKC,MAAOX,GAAoBU,MAChC,yBAAKC,MAAOL,KAYX,SAASM,EAAT,GAKH,IAAD,gBAJDC,OAIC,GAJQC,EAIR,KAJaC,EAIb,SAHDC,OAAUC,EAGT,EAHSA,GAAIC,EAGb,EAHaA,MAAOC,EAGpB,EAHoBA,QAErBC,GACC,EAFDC,SAEC,EADDD,gBAEA,OACE,kBAAC,WAAD,KACE,uCACET,MAAO,CACLW,KAAK,GAAD,OAAKH,EAAL,KACJlB,SAAU,WACVG,UAAW,wBACXmB,wBAAyB,gBACzBC,OAAQ,EACRtB,MAAO,GACPC,OAAQ,GACRE,OAAQ,UACRG,gBAAiB,SAEfY,EAAeH,KAErB,yBACEQ,KAAK,SACLC,gBAAeZ,EACfa,gBAAeZ,EACfa,gBAAeV,EACfP,MAAO,CACLW,KAAK,GAAD,OAAKH,EAAL,KACJlB,SAAU,WACVG,UAAW,uBACXoB,OAAQ,EACRtB,MAAO,GACPC,OAAQ,GACR0B,aAAc,MACdC,WAAY,wCAwEf,SAASC,EAAT,GAA6D,IAA5CC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,cAA2B,EAAZb,SACrD,OACE,uCACEV,MAAO,CACLV,SAAU,WACVG,UAAW,sBACXD,OAAQ,GACRqB,OAAQ,EACRhB,gBAA4B,UAC5BH,OAAQ,UACRiB,KAAK,GAAD,OAAKU,EAAOb,QAAZ,KACJjB,MAAM,GAAD,OAAK+B,EAAOd,QAAUa,EAAOb,QAA7B,OAEHe,MAnEVtB,EAAOuB,aAAe,CACpBd,UAAU,GAsFZU,EAAMI,aAAe,CACnBd,UAAU,G,UChLNe,EAAc,CAClBnC,SAAU,WACVC,MAAO,OACRmC,YAAa,OACbC,MAAO,MACP9B,gBAAiB,OAGZK,EAAS,CAAC,IAAK,KACf0B,EAAU,CAAC,EAAG,IACdC,EAAgB,CAAC,GAoJRC,E,YAjJd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAePC,iBAAmB,SAAAC,GAChB,EAAKC,SAAS,CAAED,eAjBA,EAoBnBE,kBAAoB,SAAAC,GACjB,EAAKF,SAAS,CAAEE,gBArBA,EA8BnBC,iBAAmB,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACKE,MAAM,6CADX,cACZC,EADY,kBAAAH,EAAA,MAECG,EAASC,QAFV,OAEZC,EAFY,OAGlB,EAAKC,MAAMC,aAAeF,EAAKG,iBAHb,sCA5BlB,EAAKF,MAAQ,CACZX,UAAW,IACXG,WAAY,EACZS,aAAc,IACdE,SAAU,IAAK,GACfC,WAAY,EACZC,WAAY,EACZC,OAAQrB,EAAcsB,QACtBC,OAAQvB,EAAcsB,SAEvB,EAAKnB,iBAAmB,EAAKA,iBAAiBqB,KAAtB,gBACxB,EAAKlB,kBAAoB,EAAKA,kBAAkBkB,KAAvB,gBAbP,E,uEAyBlB,IAAIf,EAAIgB,KAAKC,IAAI,EAAEC,KAAKZ,MAAMG,SAASS,KAAKZ,MAAMR,YAClDoB,KAAKZ,MAAMI,YAAcQ,KAAKZ,MAAMX,UAAUuB,KAAKZ,MAAMG,SAAST,GAAGA,EAAE,IAAImB,QAAQ,GACnFD,KAAKZ,MAAMK,YAAcO,KAAKZ,MAAMI,WAAWQ,KAAKZ,MAAMC,cAAcY,QAAQ,K,+BAahF,OAHAD,KAAKnB,mBACLmB,KAAKE,UAGJ,yBAAKC,UAAU,OACf,yBAAKA,UAAU,YACd,yBAAKA,UAAU,SACd,4GACA,2BAAKH,KAAKZ,MAAMX,YAGb,kBAAC,IAAD,CACE2B,KAAM,EACNC,KAAM,IACN3D,OAAQA,EACR4D,UAAWrC,EACXsC,SAAUP,KAAKxB,iBACfgC,SAAUR,KAAKxB,iBACfkB,OAAQM,KAAKZ,MAAMM,QAEnB,kBAAC,IAAD,MACG,gBAAGnD,EAAH,EAAGA,aAAH,OAAsB,kBAACD,EAAD,CAAYC,aAAcA,OAEnD,kBAAC,IAAD,MACG,gBAAGkE,EAAH,EAAGA,QAASxD,EAAZ,EAAYA,eAAZ,OACC,yBAAKkD,UAAU,kBACZM,EAAQC,KAAI,SAAA7D,GAAM,OACjB,kBAACJ,EAAD,CACRkE,IAAK9D,EAAOC,GACZJ,OAAQA,EACEG,OAAQA,EACRI,eAAgBA,WAM1B,kBAAC,IAAD,CAAQ2D,OAAO,IACZ,gBAAGC,EAAH,EAAGA,OAAQ9C,EAAX,EAAWA,cAAX,OACC,yBAAKoC,UAAU,iBACZU,EAAOH,KAAI,gBAAG5D,EAAH,EAAGA,GAAIe,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAf,OACV,kBAACF,EAAD,CACE+C,IAAK7D,EACLe,OAAQA,EACRC,OAAQA,EACRC,cAAeA,YAQ/B,yBAAKoC,UAAU,SACd,sIACA,2BAAIH,KAAKZ,MAAMR,aAGhB,kBAAC,IAAD,CACMwB,KAAM,EACNC,KAAM,EACN3D,OAAQ0B,EACRkC,UAAWrC,EACXsC,SAAUP,KAAKrB,kBACf6B,SAAUR,KAAKrB,kBACfe,OAAQM,KAAKZ,MAAMM,QAEnB,kBAAC,IAAD,MACG,gBAAGnD,EAAH,EAAGA,aAAH,OAAsB,kBAACD,EAAD,CAAYC,aAAcA,OAEnD,kBAAC,IAAD,MACG,gBAAGkE,EAAH,EAAGA,QAASxD,EAAZ,EAAYA,eAAZ,OACC,yBAAKkD,UAAU,kBACZM,EAAQC,KAAI,SAAA7D,GAAM,OACjB,kBAACJ,EAAD,CACRkE,IAAK9D,EAAOC,GACZJ,OAAQA,EACEG,OAAQA,EACRI,eAAgBA,WAM1B,kBAAC,IAAD,CAAQ2D,OAAO,IACZ,gBAAGC,EAAH,EAAGA,OAAQ9C,EAAX,EAAWA,cAAX,OACC,yBAAKoC,UAAU,iBACZU,EAAOH,KAAI,gBAAG5D,EAAH,EAAGA,GAAIe,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAAf,OACV,kBAACF,EAAD,CACE+C,IAAK7D,EACLe,OAAQA,EACRC,OAAQA,EACRC,cAAeA,YAO/B,yBAAKoC,UAAU,SACd,uBAAGA,UAAU,UAAb,4DAAkC,8BAAOH,KAAKZ,MAAMI,WAAlB,MAAlC,IAAyE,kCAAQQ,KAAKZ,MAAMK,WAAnB,qD,GA1I5DqB,IAAMC,WCNJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ada6abe.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// *******************************************************\r\n// RAIL\r\n// *******************************************************\r\nconst railOuterStyle = {\r\n  position: 'absolute',\r\n  width: '100%',\r\n  height: 30,\r\n  transform: 'translate(0%, -50%)',\r\n  // borderRadius: 7,\r\n  cursor: 'pointer',\r\n  // border: '1px solid white',\r\n}\r\n\r\nconst railInnerStyle = {\r\n  position: 'absolute',\r\n  width: '100%',\r\n  height: 10,\r\n  transform: 'translate(0%, -50%)',\r\n  pointerEvents: 'none',\r\n  backgroundColor: '#9d9d9d',\r\n}\r\n\r\nexport function SliderRail({ getRailProps }) {\r\n  return (\r\n    <Fragment>\r\n      <div style={railOuterStyle} {...getRailProps()} />\r\n      <div style={railInnerStyle} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nSliderRail.propTypes = {\r\n  getRailProps: PropTypes.func.isRequired,\r\n}\r\n\r\n// *******************************************************\r\n// HANDLE COMPONENT\r\n// *******************************************************\r\nexport function Handle({\r\n  domain: [min, max],\r\n  handle: { id, value, percent },\r\n  disabled,\r\n  getHandleProps,\r\n}) {\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          transform: 'translate(-50%, -50%)',\r\n          WebkitTapHighlightColor: 'rgba(0,0,0,0)',\r\n          zIndex: 5,\r\n          width: 20,\r\n          height: 20,\r\n          cursor: 'pointer',\r\n          backgroundColor: 'none',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      />\r\n      <div\r\n        role=\"slider\"\r\n        aria-valuemin={min}\r\n        aria-valuemax={max}\r\n        aria-valuenow={value}\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          transform: 'translate(-5%, -50%)',\r\n          zIndex: 2,\r\n          width: 30,\r\n          height: 30,\r\n          borderRadius: '50%',\r\n          background: 'linear-gradient(#838383, #000000)',\r\n        }}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nHandle.propTypes = {\r\n  domain: PropTypes.array.isRequired,\r\n  handle: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  getHandleProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n}\r\n\r\nHandle.defaultProps = {\r\n  disabled: false,\r\n}\r\n\r\n// *******************************************************\r\n// KEYBOARD HANDLE COMPONENT\r\n// Uses a button to allow keyboard events\r\n// *******************************************************\r\nexport function KeyboardHandle({\r\n  domain: [min, max],\r\n  handle: { id, value, percent },\r\n  disabled,\r\n  getHandleProps,\r\n}) {\r\n  return (\r\n    <button\r\n      role=\"slider\"\r\n      aria-valuemin={min}\r\n      aria-valuemax={max}\r\n      aria-valuenow={value}\r\n      style={{\r\n        left: `${percent}%`,\r\n        position: 'absolute',\r\n        transform: 'translate(-50%, -50%)',\r\n        zIndex: 2,\r\n        width: 30,\r\n        height: 30,\r\n        borderRadius: '50%',\r\n        boxShadow: '1px 1px 1px 1px rgba(0, 0, 0, 0.3)',\r\n        backgroundColor: disabled ? '#666' : '#ffc400',\r\n      }}\r\n      {...getHandleProps(id)}\r\n    />\r\n  )\r\n}\r\n\r\nKeyboardHandle.propTypes = {\r\n  domain: PropTypes.array.isRequired,\r\n  handle: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  getHandleProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n}\r\n\r\nKeyboardHandle.defaultProps = {\r\n  disabled: false,\r\n}\r\n\r\n// *******************************************************\r\n// TRACK COMPONENT\r\n// *******************************************************\r\nexport function Track({ source, target, getTrackProps, disabled }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        transform: 'translate(0%, -50%)',\r\n        height: 10,\r\n        zIndex: 1,\r\n        backgroundColor: disabled ? '#ff0000' : '#ff0000',\r\n        cursor: 'pointer',\r\n        left: `${source.percent}%`,\r\n        width: `${target.percent - source.percent}%`,\r\n      }}\r\n      {...getTrackProps()}\r\n    />\r\n  )\r\n}\r\n\r\nTrack.propTypes = {\r\n  source: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  target: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  getTrackProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool,\r\n}\r\n\r\nTrack.defaultProps = {\r\n  disabled: false,\r\n}\r\n\r\n// *******************************************************\r\n// TICK COMPONENT\r\n// *******************************************************\r\nexport function Tick({ tick, count, format }) {\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          marginTop: 14,\r\n          width: 1,\r\n          height: 5,\r\n          backgroundColor: 'rgb(200,200,200)',\r\n          left: `${tick.percent}%`,\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          marginTop: 22,\r\n          fontSize: 10,\r\n          textAlign: 'center',\r\n          marginLeft: `${-(100 / count) / 2}%`,\r\n          width: `${100 / count}%`,\r\n          left: `${tick.percent}%`,\r\n        }}\r\n      >\r\n        {format(tick.value)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTick.propTypes = {\r\n  tick: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  count: PropTypes.number.isRequired,\r\n  format: PropTypes.func.isRequired,\r\n}\r\n\r\nTick.defaultProps = {\r\n  format: d => d,\r\n}","import React from 'react';\nimport { Slider, Rail, Handles, Tracks } from 'react-compound-slider';\nimport { SliderRail, Handle, Track } from './components'; // example render components - source below\n\nimport './App.scss';\n\nconst sliderStyle = {\n  position: 'relative',\n  width: '100%',\n\ttouchAction: 'none',\n\tcolor: 'red',\n\tbackgroundColor: 'red',\n}\n\nconst domain = [100, 1000]\nconst domain2 = [1, 12]\nconst defaultValues = [1]\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsummValue: 100,\n\t\t\tmonthValue: 1,\n\t\t\texchangeRate: 2.1,\n\t\t\tloanRate: 0.16/12,\n\t\t\tpaymentUSD: 0,\n\t\t\tpaymentBLR: 0,\n\t\t\tvalues: defaultValues.slice(),\n\t\t\tupdate: defaultValues.slice(),\n\t\t};\n\t\tthis.handleChangeSumm = this.handleChangeSumm.bind(this);\n\t\tthis.handleChangeMonth = this.handleChangeMonth.bind(this);\n\t}\n\n\thandleChangeSumm = summValue => {\n    this.setState({ summValue })\n\t}\n\t\n\thandleChangeMonth = monthValue => {\n    this.setState({ monthValue })\n  }\n\n\tpayment() {\n\t\tlet a = Math.pow(1+this.state.loanRate,this.state.monthValue);\n\t\tthis.state.paymentUSD = (this.state.summValue*this.state.loanRate*a/(a-1)).toFixed(1);\n\t\tthis.state.paymentBLR = (this.state.paymentUSD*this.state.exchangeRate).toFixed(1);\n\t}\n\n\tgetExchangeRates = async() => {\n\t\tconst response = await fetch(`http://www.nbrb.by/API/ExRates/Rates/145`);\n\t\tconst data = await response.json();\n\t\tthis.state.exchangeRate = data.Cur_OfficialRate;\n\t}\n\t\n  render() {\n\t\tthis.getExchangeRates();\n\t\tthis.payment();\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t<div className='App-calc'>\n\t\t\t\t<div className='range'>\n\t\t\t\t\t<p>Сумма кредита ($)</p>\n\t\t\t\t\t<p >{this.state.summValue}</p>\n\t\t\t\t</div>\n\n        <Slider\n          mode={1}\n          step={100}\n          domain={domain}\n          rootStyle={sliderStyle}\n          onUpdate={this.handleChangeSumm}\n          onChange={this.handleChangeSumm}\n          values={this.state.values}\n        >\n          <Rail>\n            {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\n          </Rail>\n          <Handles>\n            {({ handles, getHandleProps }) => (\n              <div className=\"slider-handles\">\n                {handles.map(handle => (\n                  <Handle\n\t\t\t\t\t\t\t\t\t\tkey={handle.id}\n\t\t\t\t\t\t\t\t\t\tdomain={domain}\n                    handle={handle}\n                    getHandleProps={getHandleProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Handles>\n          <Tracks right={false}>\n            {({ tracks, getTrackProps }) => (\n              <div className=\"slider-tracks\">\n                {tracks.map(({ id, source, target }) => (\n                  <Track\n                    key={id}\n                    source={source}\n                    target={target}\n                    getTrackProps={getTrackProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Tracks>\n        </Slider>\n\n\t\t\t\t<div className='range'>\n\t\t\t\t\t<p>Количество месяцев</p>\n\t\t\t\t\t<p>{this.state.monthValue}</p>\n\t\t\t\t</div>\n\n\t\t\t\t<Slider\n          mode={1}\n          step={1}\n          domain={domain2}\n          rootStyle={sliderStyle}\n          onUpdate={this.handleChangeMonth}\n          onChange={this.handleChangeMonth}\n          values={this.state.values}\n        >\n          <Rail>\n            {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\n          </Rail>\n          <Handles>\n            {({ handles, getHandleProps }) => (\n              <div className=\"slider-handles\">\n                {handles.map(handle => (\n                  <Handle\n\t\t\t\t\t\t\t\t\t\tkey={handle.id}\n\t\t\t\t\t\t\t\t\t\tdomain={domain}\n                    handle={handle}\n                    getHandleProps={getHandleProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Handles>\n          <Tracks right={false}>\n            {({ tracks, getTrackProps }) => (\n              <div className=\"slider-tracks\">\n                {tracks.map(({ id, source, target }) => (\n                  <Track\n                    key={id}\n                    source={source}\n                    target={target}\n                    getTrackProps={getTrackProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Tracks>\n        </Slider>\n\t\t\t\t<div className='range'>\n\t\t\t\t\t<p className='return'>К возврату: <span>{this.state.paymentUSD} $</span> <span>({this.state.paymentBLR} бел. руб.)</span></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}